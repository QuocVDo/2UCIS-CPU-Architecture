111001001 //r1 = LSW + 1 (mSW) 31 in first iteration
101001000 //r0 = b11 b10 b9 b8 b7 b6 b5 p8
100111101 //Extract P8: r7 = p8
110111011 //
110111010 //r7 = 0 0 p8 0 0 0 0 0
000101101 //Clear r5
110000101 //r0 = 0 b11 b10 b9 b8 b7 b6 b5
110000011 //
110000001 //r0 = b8 b7 b6 b5 0 0 0 0
000101000 //r5 = b8 b7 b6 b5 0 0 0 0
101001000 //Load mSW
110000111 //
110000110 //r0 = 0 0 0 0 0 b11 b10 b9
101001100 //STorE DECoDED mSW To rEaD aDDrESS (31 initially)
111001111 //r1 = address of LSW (30 initially)
101001000 //Load LSW r0 = b4 b3 b2 p4 b1 p2 p1 p0
100110100 //r6 = 0 0 0 p4 0 p2 p1 p0
010111110 //r7 = 0 0 p8 p4 0 p2 p1 p0
000000110 //r0 = b4 b3 b2 0 b1 0 0 0 (clear the parities)
110000111 //r6 = 0 0 0 b4 b3 b2 0 b1
100011101 //r3 = 0 0 0 0 0 0 0 b1
110000101 //r6 = 0 0 0 0 b4 b3 b2 0
010000011 //r6 = 0 0 0 0 b4 b3 b2 b1
010101000 //r5 = b8 b7 b6 b5 b4 b3 b2 b1
000000000 //Clear r0
000000101 //Copy over r5 into r0
101001100 //store decodedLSW to readaddress (initially 30)
111001001 //r1 = mSW (initially 31)
101001000 //load mSW into r0
001110000 //r6 = ^(b11:b9)
111001111 //r1 = 0. r1 now contains LSW address (initially 30)
101001000 //load LSW
110000111 //
110000101 //r0 = 0 0 0 0 b8 b7 b6 b5
001100000 //r4 = ^(b8:b5)
000100110 //r4 = r4 ^ r6 = ^(b11:b5) = 0 0 0 0 0 0 0 p8
110100011 //
110100010 //r4 = 0 0 p8 0 0 0 0 0
111001001 //r1 = 1. (initially 31)
101001000 //Load mSW
110000011 //
110000010 //r0 = b11 b10 b9 0 0 0 0 0
000101101 //Clear r5
000101000 //r5 = b11 b10 b9 0 0 0 0 0
111001111 //r1 = address of LSW (30 initially)
101001000 //Load LSW r0 = b8:1—-------------35
100110000 //r6 = b8 0 0 0 b4 b3 b2 0 (maSKING)
001110110 //Parity flag reduction xor. r6 = ^(b8b4b3b2)
001101101 //r5 = ^(b11:9)
000101110 //r5 = ^(b11:8b4b3b2) = p4
110101011 //
110101001 //r5 = 0 0 0 p4 0 0 0 0
010100101 //r4 = 0 0 p8 p4 0 0 0 0
111001001 //r1 = mSW address (31 initially)
101001000 //r0 = 0 0 0 0 0 b11 b10 b9
110000101 //r0 = 0 0 0 0 0 0 b11 b10
001110000 //r6 = ^(b11:10)
111001111 //r1 = LSW address (INITIaLLY 30)
101001000 //Load LSW
100101001 //r4 = 0 b7 b6 0 b4 b3 0 b1
001101101 //r4 = ^(b7b6b4b3b1)
000101110 //r4 = ^(b11b10b7b6b4 b3b1) = p2
110101010 //r4 = 0 0 0 0 0 p2 0 0
010100101 //r4 = 0 0 0 p4 0 p2 0 0
100101010 //r5 = 0 b7 0 b5 b4 0 b2 b1
001101101 //r5 = ^(b7b5b4b2b1)
111001001 //r1 = 1 (mSW)
101001000 //Load mSW
100110011 //r6 = 0 0 0 0 0 b11 0 b9
001110110 //r6 = ^(b11b9)
000101110 //r5 = ^(b11b9b7b5b4b2b1) = p1
110101001 //
010100101 //r4 = 0 0 0 P4 0 p2 p1 0 ----------------------------------------------------
001011000 //
111001111 //
101001000 //
001000000 //RXOR of LSW
000011000 //
000101101 //
000101111 //
110101101 //
001101101 //
000101011 //
010100101 //
000100111 //r4 = difference of parities-----------------------------------------85
000101101 //Clear r5
111101001 //r5 = 0 0 0 0 0 0 0 1
110101011 //
110101010 //
110101001 //r5 = 0 1 0 0 0 0 0 0
111001001 //R1 = MSW (31 initially--------------------------------------------------------------------)
101001000 //
111010001 //
000110110 //Clear r6
000111111 //Clear r7
111111001 //r7 = 0 0 0 0 0 0 0 1
110111011 //
110111011 //r7 = 0 1 0 0 0 0 0 0
011100110 //If r4 = 0 then jump to instruction 256
111111011 //
111111001 //r7 = 68 (new address we are jumping to)
111110001 //r6 = 0 0 0 0 0 0 0 1
011100110 //If P0 is the only one that doesn’t match then P0 is wrong.
111110010 //r6 = 0 0 0 0 0 0 1 1
011100110 //If p0 and p1 is wrong then jump to INSTrUCTIoN 272
111110010 //r6 = 0 0 0 0 0 1 0 1
011100110 //If p0 and p2 is wrong then jump to INSTrUCTIon 272
110110010 //r6 = 0 0 0 1 0 1 0 0
111110101 //r6 = 0 0 0 1 0 0 0 1
011100110 //If p0 and p4 is wrong then jump to INSTrUCTIoN 272
110110001 //r6 = 0 0 1 0 0 0 1 0
111110111 //r6 = 0 0 1 0 0 0 0 1
011100110 //If p0 and p8 is wrong then jump to INSTRUCTION 272
000110110 //clear r6
111110011 //r6 = 0 0 0 0 0 0 1 1
111110011 //r6 = 0 0 0 0 0 1 1 0
111110001 //r6 = 0 0 0 0 0 1 1 1
111111011 //
111111001 //r7 = 72 (new address we are jumping to is 288)
011100110 //If p0 p1 p2 is wrong then jump to INSTrUCTIoN 288
110110001 //r6 = 0 0 0 0 1 1 1 0
111110011 //
111110010 //r6 = 0 0 0 1 0 0 1 1
111111011 //
111111001 //r7 = 76 (new address we are jumping to is 304)
011100110 //If p0 p1 p4 is wrong then jump to INSTrUCTIoN 304
111110010 //r6 = 0 0 0 1 0 1 0 1
111111011 //
111111001 //r7 = 80 (new address we are jumping to is 320)
011100110 //If p0 p2 p4 is wrong then jump to INSTrUCTIoN 320
111110010 //r6 = 0 0 0 1 0 1 1 1
111111011 //
111111001 //r7 = 84 (new address we are jumping to is 336)
011100110 //If p0 p1 p2 p4 is wrong then jump to INSTrUCTIoN 336
000110110 //Clear r6
111110001 //r6 = 0 0 0 0 0 0 0 1
110110011 //
110110010 //r6 = 0 0 1 0 0 0 0 0
111110011 //r6 = 0 0 1 0 0 0 1 1
111111011 //
111111001 //r7 = 88 (new address we are jumping to is 352)
011100110 //If p0 p1 p8 is wrong then jump to INSTrUCTIoN 352)
111110010 //r6 = 0 0 1 0 0 1 0 1
111111011 //
111111001 //r7 = 92 (new address we are jumping to is 362)
011100110 //If p0 p2 p8 is wrong then jump to INSTrUCTIoN 368)
111110010 //r6 = 0 0 1 0 0 1 1 1
111111011 //
111111001 //r7 = 96 (new address we are jumping to is 384)
011100110 //If p0 p1 p2 p8 is wrong then jump to INSTrUCTIoN 384)
000110110 //r6 = 0
111110011 //r6 = 0 0 0 0 0 0 1 1
110110011 //r6 = 0 0 0 1 1 0 0 0
110110001 //r6 = 0 0 1 1 0 0 0 0
111110001 //r6 = 0 0 1 1 0 0 0 1
111111011 //
111111001 //r7 = 100 (new address we are jumping to is 400)
011100110 //If p0 p4 p8 is wrong then jump to INSTrUCTIoN 400)
111110010 //r6 = 0 0 1 1 0 0 1 1
111111011 //
111111001 //r7 = 104 (new address we are jumping to is 416)
011100110 //If p0 p1 p4 p8 is wrong then jump to INSTrUCTIoN 416)
111110010 //r6 = 0 0 1 1 0 1 0 1
111111011 //
111111001 //r7 = 108 (new address we are jumping to is 432)
011100110 //If p0 p2 p4 p8 is wrong then jump to INSTrUCTIoN 432)
111110010 //r6 = 0 0 1 1 0 1 1 1
111111011 //
111111001 //r7 = 112 (new address we are jumping to is 448)
011100110 //If p0 p1 p2 p4 p8 is wrong then jump to INSTrUCTIoN 448)
111111011 //
111111001 //r7 = 116 (new address we are jumping to is 464)
011111111 //Jump to INSTrUCTIon 464
111111000 //nop
111111000 //nop
111111000 //nop
111111000 //nop
111111000 //nop
111111000 //nop
111111000 //nop
111111000 //nop
111111000 //nop
111111000 //nop
111111000 //nop
111111000 //nop
111111000 //nop
111111000 //nop
111111000 //nop
111111000 //nop
111111000 //nop
111111000 //nop
111111000 //nop
111111000 //nop
111111000 //nop
111111000 //nop
111111000 //nop
111111000 //nop
111111000 //nop
111111000 //nop
111111000 //nop
111111000 //nop
111111000 //nop
111111000 //nop
111111000 //nop
111111000 //nop
111111000 //nop
111111000 //nop
111111000 //nop
111111000 //nop
111111000 //nop
111111000 //nop
111111000 //nop
111111000 //nop
111111000 //nop
111111000 //nop
111111000 //nop
111111000 //nop
111111000 //nop
111111000 //nop
111111000 //nop
111111000 //nop
111111000 //nop
111111000 //nop
111111000 //nop
111111000 //nop
111111000 //nop
111111000 //nop
111111000 //nop
111111000 //nop
111111000 //nop
111111000 //nop
111111000 //nop
111111000 //nop
111111000 //nop
111111000 //nop
111111000 //nop
111111000 //nop
111111000 //nop
111111000 //nop
111111000 //nop
111111000 //nop
111111000 //nop
111111000 //nop
111111000 //nop
111111000 //nop
111111000 //nop
111111000 //nop
111111000 //nop
111111000 //nop
111111000 //nop
111111000 //nop
111111000 //nop
111111000 //nop
111111000 //nop
111111000 //nop
111111000 //nop
101010100 //Store mSW as is No moDS needed
111001111 //r1 = LSW (30 initially)
111010111 //r2 = LSW (1 initially)
101001000 //Load LSW
101010100 //Store LSW as is
110111001 //r7 = 128 (JUmP To 128*4)
011111111 //Jump to END of loop (512)
111111000 //nop
111111000 //nop
111111000 //nop
111111000 //nop
111111000 //nop
111111000 //nop
111111000 //nop
111111000 //nop
111111000 //nop
010000101 //0 1 0 0 0 b11 b10 b9
101010100 //Store mSW
111001111 //r1 = LSW (30 initially)
111010111 //r2 = LSW (1 initially)
101001000 //Load LSW
101010100 //Store LSW as is
000111111 //Clear r7
111111001 //r1 = 0 0 0 0 0 0 0 1
110111011 //
110111011 //
110111001 //r1 = 1 0 0 0 0 0 0 0
011111111 //Jump to END of loop
111111000 //nop
111111000 //nop
111111000 //nop
111111000 //nop
010000101 //0 1 0 0 0 b11 b10 b9
101010100 //Store mSW
111001111 //r1 = LSW (30 initially)
111010111 //r2 = LSW (1 initially)
101001000 //Load LSW
000111111 //Clear r7
111111001 //r7 = 0 0 0 0 0 0 0 1
000000111 //r0 = b8 b7 b6 b5 b 4 b3 b2 !b1
101010100 //STorE LSW
110111011 //
110111011 //
110111001 //r1 = 1 0 0 0 0 0 0 0
011111111 //Jump to END of loop
111111000 //nop
111111000 //nop
111111000 //nop
010000101 //0 1 0 0 0 b11 b10 b9
101010100 //Store mSW
111001111 //r1 = LSW (30 initially)
111010111 //r2 = LSW (1 initially)
101001000 //Load LSW
000111111 //Clear r7
111111001 //r7 = 0 0 0 0 0 0 0 1
110111001 //r7 = 0 0 0 0 0 0 1 0
000000111 //r0 = b8 b7 b6 b5 b 4 b3 !b2 b1
101010100 //STorE LSW
110111011 //
110111011 //r1 = 1 0 0 0 0 0 0 0
011111111 //Jump to END of loop
111111000 //nop
111111000 //nop
111111000 //nop
010000101 //0 1 0 0 0 b11 b10 b9
101010100 //Store mSW
111001111 //r1 = LSW (30 initially)
111010111 //r2 = LSW (1 initially)
101001000 //Load LSW
000111111 //Clear r7
111111001 //r7 = 0 0 0 0 0 0 0 1
110111010 //r7 = 0 0 0 0 0 1 0 0
000000111 //r0 = b8 b7 b6 b5 b4 !b3 b2 b1
101010100 //STorE LSW
110111010 //
110111011 //r1 = 1 0 0 0 0 0 0 0
011111111 //Jump to END of loop
111111000 //nop
111111000 //nop
111111000 //nop
010000101 //0 1 0 0 0 b11 b10 b9
101010100 //Store mSW
111001111 //r1 = LSW (30 initially)
111010111 //r2 = LSW (1 initially)
101001000 //Load LSW
000111111 //Clear r7
111111001 //r7 = 0 0 0 0 0 0 0 1
110111011 //r7 = 0 0 0 0 1 0 0 0
000000111 //r0 = b8 b7 b6 b5 !b4 b3 b2 b1
101010100 //STorE LSW
110111001 //
110111011 //r1 = 1 0 0 0 0 0 0 0
011111111 //Jump to END of loop
111111000 //nop
111111000 //nop
111111000 //nop
010000101 //0 1 0 0 0 b11 b10 b9
101010100 //Store mSW
111001111 //r1 = LSW (30 initially)
111010111 //r2 = LSW (1 initially)
101001000 //Load LSW
000111111 //Clear r7
111111001 //r7 = 0 0 0 0 0 0 0 1
110111011 //r7 = 0 0 0 0 1 0 0 0
110111001 //r7 = 0 0 0 1 0 0 0 0
000000111 //r0 = b8 b7 b6 !b5 b4 b3 b2 b1
101010100 //STorE LSW
110111011 //r1 = 1 0 0 0 0 0 0 0
011111111 //Jump to END of loop
111111000 //nop
111111000 //nop
111111000 //nop
010000101 //0 1 0 0 0 b11 b10 b9
101010100 //Store mSW
111001111 //r1 = LSW (30 initially)
111010111 //r2 = LSW (1 initially)
101001000 //Load LSW
000111111 //Clear r7
111111001 //r7 = 0 0 0 0 0 0 0 1
110111011 //r7 = 0 0 0 0 1 0 0 0
110111010 //r7 = 0 0 1 0 0 0 0 0
000000111 //r0 = b8 b7 !b6 b5 b4 b3 b2 b1
101010100 //STorE LSW
110111010 //r1 = 1 0 0 0 0 0 0 0
011111111 //Jump to END of loop
111111000 //nop
111111000 //nop
111111000 //nop
010000101 //0 1 0 0 0 b11 b10 b9
101010100 //Store mSW
111001111 //r1 = LSW (30 initially)
111010111 //r2 = LSW (1 initially)
101001000 //Load LSW
000111111 //Clear r7
111111001 //r7 = 0 0 0 0 0 0 0 1
110111011 //r7 = 0 0 0 0 1 0 0 0
110111011 //r7 = 0 1 0 0 0 0 0 0
000000111 //r0 = b8 !b7 b6 b5 b4 b3 b2 b1
101010100 //STorE LSW
110111001 //r1 = 1 0 0 0 0 0 0 0
011111111 //Jump to END of loop
111111000 //nop
111111000 //nop
111111000 //nop
010000101 //0 1 0 0 0 b11 b10 b9
101010100 //Store mSW
111001111 //r1 = LSW (30 initially)
111010111 //r2 = LSW (1 initially)
101001000 //Load LSW
000111111 //Clear r7
111111001 //r7 = 0 0 0 0 0 0 0 1
110111011 //r7 = 0 0 0 0 1 0 0 0
110111011 //r7 = 0 1 0 0 0 0 0 0
110111001 //r1 = 1 0 0 0 0 0 0 0
000000111 //r0 = !b8 b7 b6 b5 b4 b3 b2 b1
101010100 //STorE LSW
011111111 //Jump to END of loop
111111000 //nop
111111000 //nop
111111000 //nop
010000101 //0 1 0 0 0 b11 b10 b9
000111111 //Clear r7
111111001 //r7 = 0 0 0 0 0 0 0 1
000000111 //r0 = 0 1 0 0 0 b11 b10 !b9
101010100 //Store mSW
111001111 //r1 = LSW (30 initially)
111010111 //r2 = LSW (1 initially)
101001000 //Load LSW
101010100 //STorE LSW without changing
110111011 //r7 = 0 0 0 0 1 0 0 0
110111011 //r7 = 0 1 0 0 0 0 0 0
110111001 //r1 = 1 0 0 0 0 0 0 0
011111111 //Jump to END of loop
111111000 //nop
111111000 //nop
111111000 //nop
010000101 //0 1 0 0 0 b11 b10 b9
000111111 //Clear r7
111111001 //r7 = 0 0 0 0 0 0 0 1
110111001 //r7 = 0 0 0 0 0 0 1 0
000000111 //r0 = 0 1 0 0 0 b11 !b10 b9
101010100 //Store mSW
111001111 //r1 = LSW (30 initially)
111010111 //r2 = LSW (1 initially)
101001000 //Load LSW
101010100 //STorE LSW without changing
110111011 //r7 = 0 0 0 0 1 0 0 0
110111011 //r7 = 0 1 0 0 0 0 0 0
011111111 //Jump to END of loop
111111000 //nop
111111000 //nop
111111000 //nop
010000101 //0 1 0 0 0 b11 b10 b9
000111111 //Clear r7
111111001 //r7 = 0 0 0 0 0 0 0 1
110111010 //r7 = 0 0 0 0 0 1 0 0
000000111 //r0 = 0 1 0 0 0 !@b11 b10 b9
101010100 //Store mSW
111001111 //r1 = LSW (30 initially)
111010111 //r2 = LSW (1 initially)
101001000 //Load LSW
101010100 //STorE LSW without changing
110111010 //r7 = 0 0 0 0 1 0 0 0
110111011 //r7 = 1 0 0 0 0 0 0 0
011111111 //Jump to END of loop
111111000 //nop
111111000 //nop
111111000 //nop
110101001 //r5 = 1 0 0 0 0 0 0 0
010000101 //r0 = 1 0 0 0 0 x x x
101010100 //Store mSW
111001111 //Get address of LSW
111010111 //Get address of LSW
101001000 //Load LSW
101010100 //Store LSW
000111111 //Clear r7
111111001 //r7 = 0 0 0 0 0 0 0 1
110111011 //r7 = 0 0 0 0 1 0 0 0
110111011 //r7 = 0 1 0 0 0 0 0 0
110111001 //r1 = 1 0 0 0 0 0 0 0
011111111 //Jump to END of loop
111111000 //nop
111111000 //nop
111111000 //nop
111111000 //nop
111111000 //nop
111111000 //nop
111111000 //nop
111111000 //nop
111111000 //nop
111111000 //nop
111111000 //nop
111111000 //nop
111111000 //nop
111111000 //nop
111111000 //nop
111111000 //nop
111111000 //nop
111111000 //nop
111111000 //nop
111111000 //nop
111111000 //nop
111111000 //nop
111111000 //nop
111111000 //nop
111111000 //nop
111111000 //nop
111111000 //nop
111111000 //nop
111111000 //nop
111111000 //nop
111111000 //nop
111111000 //nop
111111000 //nop
111111000 //nop
111111000 //nop
111001010 //LSW read address of next message
111010010 //LSW write address of next message
000110110 //Clear r6
111110011 //
110110010 //
111110011 //
110110010 //r6 = 0 0 1 1 1 1 0 0 = 60
111111011 //
111111010 //r7 = 1 0 0 0 0 1 0 1
011001110 //If r1 = 60 jump to 532
000111111 //r7 = 0
011111111 //else jump to 0
111111000 //nop
111111000 //nop
111111000 //nop
111111000 //nop
111111000 //nop
111111000 //nop
111111000 //nop
111111000 //nop
100000111